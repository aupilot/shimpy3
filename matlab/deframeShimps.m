

labelFileName = 'E:\Chimpact\train_labels.csv';
videoPath = 'E:\Chimpact\train';
imagePath = 'E:\Chimpact\train_images_full';
imageResizeRate = 1;% 0.5;

% create the output dir if does not exist
[status, msg] = mkdir(imagePath);  

%% Import labels
% Auto-generated by MATLAB on 16-Sep-2021

opts = delimitedTextImportOptions("NumVariables", 3);

% Specify range and delimiter
opts.DataLines = [2, Inf];
opts.Delimiter = ",";

% Specify column names and types
opts.VariableNames = ["video_id", "time", "distance"];
opts.VariableTypes = ["string", "double", "double"];

% Specify file level properties
opts.ExtraColumnsRule = "ignore";
opts.EmptyLineRule = "read";

% Specify variable properties
opts = setvaropts(opts, "video_id", "WhitespaceRule", "preserve");
opts = setvaropts(opts, "video_id", "EmptyFieldRule", "auto");

% Import the data
trainLabels = readtable("E:\Chimpact\train_labels.csv", opts);

% convert distance to categorical
% edges = 0:0.5:50.5;
% trainLabels.distance = discretize(trainLabels.distance, edges, 'categorical');
trainLabels.distance = categorical(int32(trainLabels.distance*10));

%% Import metadata
% Auto-generated by MATLAB on 16-Sep-2021 20:07:48

% Set up the Import Options and import the data
opts = delimitedTextImportOptions("NumVariables", 9);

% Specify range and delimiter
opts.DataLines = [2, Inf];
opts.Delimiter = ",";

% Specify column names and types
opts.VariableNames = ["video_id", "time", "x1", "y1", "x2", "y2", "probability", "Var8", "Var9"];
opts.SelectedVariableNames = ["video_id", "time", "x1", "y1", "x2", "y2", "probability"];
opts.VariableTypes = ["string", "double", "double", "double", "double", "double", "double", "string", "string"];

% Specify file level properties
opts.ExtraColumnsRule = "ignore";
opts.EmptyLineRule = "read";

% Specify variable properties
opts = setvaropts(opts, ["Var8", "Var9"], "WhitespaceRule", "preserve");
opts = setvaropts(opts, ["video_id", "Var8", "Var9"], "EmptyFieldRule", "auto");

% Import the data
trainMetadata = readtable("E:\Chimpact\train_metadata.csv", opts);

% Clear temporary variables
clear opts

% %% create an empty table for the dataset
% columnNames = {'fileName', 'Animal', 'Distance'};
% datasetTable = array2table(zeros(0,3), 'VariableNames', columnNames);
% datasetTable.fileName = '';


%%

% @@@@@@@@@@@@@@@@ remove me!!
% trainLabels = trainLabels(1:1000,:);

firstRun = true;
while true  
    % pick all labels from the video that comes first in the current table
    videoName = trainLabels.video_id(1);
    currentVideo = trainLabels(strcmp(trainLabels.video_id, videoName), :);
    currentMeta = trainMetadata(strcmp(trainMetadata.video_id, videoName), :);
    
    % rest of the table
    trainLabels = trainLabels(strcmp(trainLabels.video_id, videoName)==0, :); 

    myVideo = VideoReader(fullfile(videoPath, videoName));
    [~,vName,~] = fileparts(videoName);

    frameNo = 0;
    for i=1:height(currentVideo)

        % skip frames assuming 1 frame per second 
        while frameNo < currentVideo(i,:).time
           readFrame(myVideo);
           if ~hasFrame(myVideo)
               error('Corrupted video!');
           end
           frameNo = frameNo + 1;
        end

        % get the frame
        img = readFrame(myVideo);
        
        meta = currentMeta(currentMeta.time == frameNo, :);        
        % if no nans, we go ahead
        if ~isnan([meta.x1 meta.y1 meta.x2 meta.y2])
            if imageResizeRate ~= 1
                imgResized = imresize(img, imageResizeRate);
            else
                imgResized = img;
            end
            imSize = size(imgResized);

            % store image
            imgFileName = [sprintf('img_%s_%04d',vName,frameNo) '.png'];
            imgFileName = fullfile(imagePath, imgFileName);
            imwrite(imgResized, imgFileName);

            % create a raw in the dataset table

            newRecord.fileName = {imgFileName};
            newRecord.AnimalNorm = [meta.x1 meta.y1 meta.x2 meta.y2];
            newRecord.Animal = [meta.x1*imSize(2)+1 meta.y1*imSize(1)+1 meta.x2*imSize(2)-meta.x1*imSize(2) meta.y2*imSize(1)-meta.y1*imSize(1)];
            newRecord.Distance = currentVideo(i,:).distance;

            if firstRun == true
                firstRun = false;
                datasetTable = struct2table(newRecord);
            else
                datasetTable = [datasetTable; struct2table(newRecord)];
            end
        end
        frameNo = frameNo + 1;
    end
    
    % if all done
    if height(trainLabels) == 0
        break;
    end

end

save TrainDataset datasetTable




