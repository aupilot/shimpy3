
dataPath = 'E:\Chimpact\';

labelFileName = fullfile(dataPath, 'train_labels.csv');
metaFileName = fullfile(dataPath, 'train_metadata.csv');
videoPath = fullfile(dataPath,'train\');
imagePath = fullfile(dataPath, 'train_images_multi');

imageResizeRate = 0.5;
imageExtraFrames = 1;

% create the output dir if does not exist
[status, msg] = mkdir(imagePath);  

%% Import labels
% Auto-generated by MATLAB on 16-Sep-2021

opts = delimitedTextImportOptions("NumVariables", 3);

% Specify range and delimiter
opts.DataLines = [2, Inf];
opts.Delimiter = ",";

% Specify column names and types
opts.VariableNames = ["video_id", "time", "distance"];
opts.VariableTypes = ["string", "double", "double"];

% Specify file level properties
opts.ExtraColumnsRule = "ignore";
opts.EmptyLineRule = "read";

% Specify variable properties
opts = setvaropts(opts, "video_id", "WhitespaceRule", "preserve");
opts = setvaropts(opts, "video_id", "EmptyFieldRule", "auto");

% Import the data
trainLabels = readtable("E:\Chimpact\train_labels.csv", opts);

% convert distance to categorical
% edges = 0:0.5:50.5;
% trainLabels.distance = discretize(trainLabels.distance, edges, 'categorical');

% we don't multiply 10 or change to categorical for python
% trainLabels.distance = categorical(int32(trainLabels.distance*10));

%% Import metadata
% Auto-generated by MATLAB on 16-Sep-2021 20:07:48

% Set up the Import Options and import the data
opts = delimitedTextImportOptions("NumVariables", 9);

% Specify range and delimiter
opts.DataLines = [2, Inf];
opts.Delimiter = ",";

% Specify column names and types
opts.VariableNames = ["video_id", "time", "x1", "y1", "x2", "y2", "probability", "park","site_id"];
opts.SelectedVariableNames = ["video_id", "time", "x1", "y1", "x2", "y2", "probability","park","site_id"];
opts.VariableTypes = ["string", "double", "double", "double", "double", "double", "double", "string", "string"];

% Specify file level properties
opts.ExtraColumnsRule = "ignore";
opts.EmptyLineRule = "read";

% Specify variable properties
% opts = setvaropts(opts, ["Var8", "Var9"], "WhitespaceRule", "preserve");
opts = setvaropts(opts, ["video_id", "park", "site_id"], "EmptyFieldRule", "auto");

% Import the data
trainMetadata = readtable(metaFileName, opts);

% Clear temporary variables
clear opts

% %% create an empty table for the dataset
% columnNames = {'fileName', 'Animal', 'Distance'};
% datasetTable = array2table(zeros(0,3), 'VariableNames', columnNames);
% datasetTable.fileName = '';


%%
% @@@@@@@@@@@@@@@@ remove me!!
% trainLabels = trainLabels(1:50,:);
tic()

trainLabelsNew = trainLabels;
trainMetadataNew = trainMetadata;

firstRun = true;
while true  
    % pick all labels from the video that comes first in the current table
    videoName = trainLabels.video_id(1);
    currentVideo = trainLabels(strcmp(trainLabels.video_id, videoName), :);
    currentMeta = trainMetadata(strcmp(trainMetadata.video_id, videoName), :);
    
    % rest of the table
    trainLabels = trainLabels(strcmp(trainLabels.video_id, videoName)==0, :); 

    myVideo = VideoReader(fullfile(videoPath, videoName));
    [~,vName,~] = fileparts(videoName);

    x1base = -1;    % flag that informs that it has not been set yet
    y1base = 0; 
    x2base = 0; 
    y2base = 0;
    probBase = 0;
    
    frameNo = 0;
    
    for i=1:height(currentVideo)

        % skip frames assuming 1 frame per second 
        while frameNo < currentVideo(i,:).time
           readFrame(myVideo);
           if ~hasFrame(myVideo)
               error('Corrupted video!');
           end
           frameNo = frameNo + 1;
        end

        % get the frame
        meta = currentMeta(currentMeta.time == frameNo, :); 
        if isempty(meta)
            % broken meta - skip
            fprintf('.')
            break;
        end
         
        % if no nans, we go ahead
        if ~isnan(meta.x1)
            x1base = meta.x1; 
            y1base = meta.y1; 
            x2base = meta.x2; 
            y2base = meta.y2;
            probBase = meta.probability;
            site_id_base = meta.site_id;
            park_base = meta.park;

            flag = false;
        else
            % if there are nans, we try to recover using prev coordinates.   
            % we remove broken record from metadata and set flag to restore
            flag = true;
            trainMetadataNew(strcmp(trainMetadataNew.video_id, videoName) & trainMetadataNew.time == frameNo, :) = [];
        end 
        
        if x1base ~= -1
            x1 = x1base; 
            y1 = y1base; 
            x2 = x2base; 
            y2 = y2base;
            prob = probBase;
            site_id = site_id_base;
            park = park_base;
        else
            x1 = 0; 
            y1 = 0; 
            x2 = 1; 
            y2 = 1;
            prob = 0.111;
            site_id = site_id_base;
            park = park_base;
        end

        
        distance = currentVideo(i,:).distance;  
               
        for f=0:imageExtraFrames
            if hasFrame(myVideo) && (isempty(currentVideo(currentVideo.time == frameNo,:)) || f==0)
                img = readFrame(myVideo);
  
                if imageResizeRate ~= 1
                    imgResized = imresize(img, imageResizeRate);
                else
                    imgResized = img;
                end
                imSize = size(imgResized);

                % store image
                imgFileName = [sprintf('img_%s_%04d',vName,frameNo) '.png'];
                imgFileName = fullfile(imagePath, imgFileName);
                imwrite(imgResized, imgFileName);
                
                % update the new label table
                if f > 0
                        % we check if this frame ref already exist in metadata/labels. Only procees if not
                        
                        newLabel.video_id = videoName;
                        newLabel.time = frameNo;
                        newLabel.distance = distance;   % keep repeating the distance
                        trainLabelsNew = [trainLabelsNew; struct2table(newLabel)];

                        meta.time = frameNo;
                        meta.x1 = x1; 
                        meta.y1 = y1; 
                        meta.x2 = x2; 
                        meta.y2 = y2;
                        meta.probability = prob;
                        meta.site_id = site_id;
                        meta.park = park;

                        trainMetadataNew = [trainMetadataNew; meta];
                else
                    % we might need to restore the removed metadata row even if it is the first entrance
                    if flag == true
                        meta.time = frameNo;
                        meta.x1 = x1; 
                        meta.y1 = y1; 
                        meta.x2 = x2; 
                        meta.y2 = y2;
                        meta.probability = prob;
                        meta.site_id = site_id;
                        meta.park = park;

                        trainMetadataNew = [trainMetadataNew; meta];                       
                    end
                    
                end
                frameNo = frameNo + 1;
            else
                break
            end
        end
            

            % create a raw in the dataset table      
            % uncomment below to creat a matlab dataset for matlab deep learning
%             newRecord.fileName = {imgFileName};
%             newRecord.AnimalNorm = [meta.x1 meta.y1 meta.x2 meta.y2];
%             newRecord.Animal = [meta.x1*imSize(2)+1 meta.y1*imSize(1)+1 meta.x2*imSize(2)-meta.x1*imSize(2) meta.y2*imSize(1)-meta.y1*imSize(1)];
%             newRecord.Distance = currentVideo(i,:).distance;
% 
%             if firstRun == true
%                 firstRun = false;
%                 datasetTable = struct2table(newRecord);
%             else
%                 datasetTable = [datasetTable; struct2table(newRecord)];
%             end

    end
    
    % if all done
    if height(trainLabels) == 0
        break;
    end
end
writetable(trainLabelsNew, fullfile(dataPath, +'train_labels_new.csv'));
writetable(trainMetadataNew, fullfile(dataPath, 'train_meta_new.csv'));

% save TrainDataset datasetTable

toc()







